package app.tracktune.model.genre;

import app.tracktune.exceptions.SQLiteException;
import app.tracktune.interfaces.DAO;
import app.tracktune.utils.DatabaseManager;
import app.tracktune.utils.Strings;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

/**
 * Data Access Object (DAO) class for managing {@link Genre} entities in the database.
 * Provides CRUD operations and additional queries specific to Genre.
 * This DAO uses {@link DatabaseManager} for executing SQL queries and updates on the underlying database.
 * It throws {@link SQLiteException} on database operation failures.
 */
public class GenreDAO implements DAO<Genre> {
    private final DatabaseManager dbManager;

    // Database field names
    private static final String ID = "ID";
    private static final String NAME = "name";
    private static final String DESCRIPTION = "description";

    // SQL Statements for CRUD operations and queries
    private static final String INSERT_GENRE_STMT = """
        INSERT INTO Genres (name, description)
        VALUES (?, ?)
    """;

    private static final String UPDATE_GENRE_STMT = """
        UPDATE Genres
        SET name = ?, description = ?
        WHERE ID = ?
    """;

    private static final String DELETE_GENRE_STMT = """
        DELETE FROM Genres
        WHERE ID = ?
    """;

    private static final String GET_ALL_GENRES_STMT = """
        SELECT *
        FROM Genres
    """;

    private static final String GET_ALL_GENRES_USED_STMT = """
        SELECT DISTINCT g.*
        FROM Genres g
        JOIN TracksGenres tg ON tg.genreID = g.ID
    """;

    private static final String GET_GENRE_BY_ID_STMT = """
        SELECT *
        FROM Genres
        WHERE ID = ?
    """;

    private static final String GET_GENRE_BY_TRACK_ID_STMT = """
        SELECT g.*
        FROM Genres g
        JOIN TracksGenres tg ON tg.genreId = g.ID
        WHERE tg.trackID = ?
    """;

    /**
     * Constructs a GenreDAO with the specified DatabaseManager.
     *
     * @param dbManager the database manager used to perform SQL operations
     */
    public GenreDAO(DatabaseManager dbManager) {
        this.dbManager = dbManager;
    }

    /**
     * Inserts a new Genre record into the database.
     *
     * @param genre the Genre object to insert (id should be null)
     * @return the autogenerated ID of the inserted Genre
     * @throws SQLiteException if the insert operation fails
     */
    @Override
    public Integer insert(Genre genre) {
        boolean success = dbManager.executeUpdate(INSERT_GENRE_STMT,
                genre.getName(),
                genre.getDescription()
        );

        if (!success) {
            throw new SQLiteException(Strings.ERR_DATABASE);
        }
        return dbManager.getLastInsertId();
    }

    /**
     * Updates an existing Genre identified by the specified ID with new data.
     *
     * @param genre the Genre object containing updated data
     * @param id the ID of the Genre to update
     * @throws SQLiteException if the update operation fails
     */
    @Override
    public void updateById(Genre genre, int id) {
        boolean success = dbManager.executeUpdate(UPDATE_GENRE_STMT,
                genre.getName(),
                genre.getDescription(),
                id
        );

        if (!success) {
            throw new SQLiteException(Strings.ERR_DATABASE);
        }
    }

    /**
     * Deletes the Genre with the specified ID from the database.
     *
     * @param id the ID of the Genre to delete
     * @throws SQLiteException if the delete operation fails
     */
    @Override
    public void deleteById(int id) {
        boolean success = dbManager.executeUpdate(DELETE_GENRE_STMT, id);

        if (!success) {
            throw new SQLiteException(Strings.ERR_DATABASE);
        }
    }

    /**
     * Retrieves the Genre with the specified ID.
     *
     * @param id the ID of the Genre to retrieve
     * @return the Genre object if found, otherwise null
     * @throws SQLiteException if the query operation fails
     */
    @Override
    public Genre getById(int id) {
        AtomicReference<Genre> result = new AtomicReference<>();

        boolean success = dbManager.executeQuery(GET_GENRE_BY_ID_STMT,
                rs -> {
                    if (rs.next()) {
                        result.set(mapResultSetToEntity(rs));
                        return true;
                    }
                    return false;
                }, id);

        if (!success) {
            throw new SQLiteException(Strings.ERR_DATABASE);
        }

        return result.get();
    }

    /**
     * Retrieves all Genre records from the database.
     *
     * @return a list of all Genres (empty if none found)
     */
    @Override
    public List<Genre> getAll() {
        List<Genre> genres = new ArrayList<>();

        dbManager.executeQuery(GET_ALL_GENRES_STMT,
                rs -> {
                    while (rs.next()) {
                        genres.add(mapResultSetToEntity(rs));
                    }
                    return null;
                });

        return genres;
    }

    /**
     * Retrieves all Genres that are currently used by at least one track.
     *
     * @return a list of Genres linked to tracks (empty if none found)
     */
    public List<Genre> getAllUsed() {
        List<Genre> genres = new ArrayList<>();

        dbManager.executeQuery(GET_ALL_GENRES_USED_STMT,
                rs -> {
                    while (rs.next()) {
                        genres.add(mapResultSetToEntity(rs));
                    }
                    return null;
                });

        return genres;
    }

    /**
     * Retrieves all Genres associated with a given track ID.
     *
     * @param id the track ID
     * @return a list of Genres linked to the specified track (empty if none found)
     */
    public List<Genre> getAllGenresByTrackId(int id) {
        List<Genre> genres = new ArrayList<>();

        dbManager.executeQuery(GET_GENRE_BY_TRACK_ID_STMT,
                rs -> {
                    while (rs.next()) {
                        genres.add(mapResultSetToEntity(rs));
                    }
                    return null;
                }, id);

        return genres;
    }

    /**
     * Maps the current row of a ResultSet to a Genre entity.
     *
     * @param rs the ResultSet positioned at a valid row
     * @return a Genre object populated with data from the ResultSet
     * @throws SQLException if a database access error occurs
     */
    private Genre mapResultSetToEntity(ResultSet rs) throws SQLException {
        int id = rs.getInt(ID);
        String name = rs.getString(NAME);
        String description = rs.getString(DESCRIPTION);
        return new Genre(id, name, description);
    }
}
